#!/usr/bin/env python3
import time
import rospy
import sys
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from threading import Thread


# Other Imports
import numpy as np
import math as m
from tf.transformations import euler_from_quaternion, quaternion_from_euler

max_linear_velocity = 0.22
max_angular_velocity = 2.84

# v-> In 1 -> Velocidad lineal robot1-j-lider
# w -> In2 -> Velocidad Angular robot1-j-lider

#-------------------------------------INICIO DE LA CALSE-----------------------------
class PID:
    """PID Controller
    """

    def __init__(self, P=0.2, I=0.0, D=0.0, current_time=None):

        self.Kp = P
        self.Ki = I
        self.Kd = D

        self.sample_time = 0.00
        self.current_time = current_time if current_time is not None else time.time()
        self.last_time = self.current_time

        self.clear()

    def clear(self):
        """Clears PID computations and coefficients"""

        self.PTerm = 0.0
        self.ITerm = 0.0
        self.DTerm = 0.0
        self.last_error = 0.0

        # Windup Guard
        self.int_error = 0.0
        self.windup_guard = 20.0

        self.output = 0.0

    def update(self, feedback_value, current_time=None):
        """Calculates PID value for given reference feedback
        .. math::
            u(t) = K_p e(t) + K_i \int_{0}^{t} e(t)dt + K_d {de}/{dt}
        .. figure:: images/pid_1.png
           :align:   center
           Test PID with Kp=1.2, Ki=1, Kd=0.001 (test_pid.py)
        """
        error = feedback_value

        self.current_time = current_time if current_time is not None else time.time()
        delta_time = self.current_time - self.last_time
        delta_error = error - self.last_error

        if (delta_time >= self.sample_time):
            self.PTerm = self.Kp * error
            self.ITerm += error * delta_time

            if (self.ITerm < -self.windup_guard):
                self.ITerm = -self.windup_guard
            elif (self.ITerm > self.windup_guard):
                self.ITerm = self.windup_guard

            self.DTerm = 0.0
            if delta_time > 0:
                self.DTerm = delta_error / delta_time

            # Remember last time and last error for next calculation
            self.last_time = self.current_time
            self.last_error = error

            self.output = self.PTerm + (self.Ki * self.ITerm) + (self.Kd * self.DTerm)

    def setKp(self, proportional_gain):
        """Determines how aggressively the PID reacts to the current error with setting Proportional Gain"""
        self.Kp = proportional_gain

    def setKi(self, integral_gain):
        """Determines how aggressively the PID reacts to the current error with setting Integral Gain"""
        self.Ki = integral_gain

    def setKd(self, derivative_gain):
        """Determines how aggressively the PID reacts to the current error with setting Derivative Gain"""
        self.Kd = derivative_gain

    def setWindup(self, windup):
        """Integral windup, also known as integrator windup or reset windup,
        refers to the situation in a PID feedback controller where
        a large change in setpoint occurs (say a positive change)
        and the integral terms accumulates a significant error
        during the rise (windup), thus overshooting and continuing
        to increase as this accumulated error is unwound
        (offset by errors in the other direction).
        The specific problem is the excess overshooting.
        """
        self.windup_guard = windup

    def setSampleTime(self, sample_time):
        """PID that should be updated at a regular interval.
        Based on a pre-determined sampe time, the PID decides if it should compute or return immediately.
        """
        self.sample_time = sample_time


#---------------------------------------FIN DE LA CLASE --------------------------------


def scale_angle(angle):
    if(angle > m.pi):
	    angle = angle - m.pi * 2
    elif(angle < -m.pi):
	    angle = angle + m.pi * 2
    return angle


def auto(pub):
    global pose_and_orient1, pose_and_orient2, rate, vel2, isNewData, vj, isReached, error_previo, integral

    Kw = 0.45
    phiref = m.pi/4
    dref = 1
    Kv = 0.5
    isNewData = False
    pose1 = pose_and_orient1.pose.pose.position
    orient1 = pose_and_orient1.pose.pose.orientation

    pose2 = pose_and_orient2.pose.pose.position
    orient2 = pose_and_orient2.pose.pose.orientation

    _, _, yaw1 = euler_from_quaternion([orient1.x, orient1.y, orient1.z, orient1.w])
    theta1 = yaw1
    _, _, yaw2 = euler_from_quaternion([orient2.x, orient2.y, orient2.z, orient2.w])
    theta2 = yaw2

    d = m.sqrt((pose1.x - pose2.x)**2 + (pose1.y - pose2.y)**2)
    phi = m.atan2((pose1.x - pose2.x), (pose1.y - pose2.y))
    phi = scale_angle(phi)

    #Et = d * m.cos(phi) - dref * m.cos(phiref)
    Et=(pose1.x - pose2.x) - dref*m.cos(phiref)
    pidV.feedback_value=Et
    pidV.update(Et)
    vi = vj + pidV.output
  
    #Ev =d*m.sin(phi) - dref*m.sin(phiref)
    Ev =(pose1.y - pose2.y) - dref*m.sin(phiref)
    pidW.feedback_value=Ev
    pidW.update(Ev)
    wi = pidW.output

    

    if isNewData:
        print("----------------")
        print("Velocidad vi")
        print(vi)
        print("Velocidad vj")
        print(vj)
        print("Velocidad wi")
        print(wi)
        print("ERRORES")
        print(Ev,Et)
        print("Salida del PID v")
        print(pidV.output)
        print("Salida del PID w")
        print(pidW.output)
    
    if vi>max_linear_velocity:
        vi = max_linear_velocity
    if wi>max_angular_velocity:
        wi=max_angular_velocity

    vel2.linear.x, vel2.linear.y, vel2.linear.z = vi, 0, 0
    vel2.angular.x, vel2.angular.y, vel2.angular.z = 0, 0, wi
        # rospy.loginfo("Linear Velocity: %f Angular Velocity:
        # %\n",vel.linear.x,vel.angular.z)
    pub2.publish(vel2)
    return


def callback1(data):
    global pose_and_orient1
    pose_and_orient1 = data
    global isNewData
    isNewData = True
    return


def callback2(data):
    global pose_and_orient2
    pose_and_orient2 = data
    return


def callback3(data):
    global vj  # Velocidad del robot lider
    vj = data.linear.x
    return


if __name__ == "__main__":
	# initialize node and create publisher and subscriber
    rospy.init_node('follower', anonymous=True)
    pub2 = rospy.Publisher('robot2/cmd_vel', Twist, queue_size=10)
    sub1 = rospy.Subscriber("robot1/odom", Odometry, callback1)
    sub2 = rospy.Subscriber("robot2/odom", Odometry, callback2)
    sub3 = rospy.Subscriber("robot1/cmd_vel", Twist, callback3)
    rate = rospy.Rate(10)
	
    vel2 = Twist()
    
    pose_and_orient1 = Odometry()
    pose_and_orient2 = Odometry()

    pidW = PID(0.09, 0.0, 0.0)
    pidV = PID(0.1, 0.0, 0.0)
    pidW.setSampleTime(0.01)
    pidV.setSampleTime(0.01)
    


    while True:
        auto_thread = Thread(target=auto,args=(pub2,))
        auto_thread.start()
        #mode = input()
        #if mode == 'e':
        #    break;
