#!/usr/bin/env python3

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import sys, select, os
import numpy as np
from tf.transformations import euler_from_quaternion, quaternion_from_euler
if os.name == 'nt':
  import msvcrt
else:
  import tty, termios

BURGER_MAX_LIN_VEL = 0.22
BURGER_MAX_ANG_VEL = 2.84

WAFFLE_MAX_LIN_VEL = 0.26
WAFFLE_MAX_ANG_VEL = 1.82

LIN_VEL_STEP_SIZE = 0.01
ANG_VEL_STEP_SIZE = 0.1

LOG_FILE_DIR = '/home/rodrigo/catkin_ws/src/control_lider/Data'



def callback1(data):
    global pose_and_orient1
    pose_and_orient1 = data
    global isNewData
    isNewData = True
    return

if __name__=="__main__":
    if os.name != 'nt':
        settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('Leer_robot')
    sub1 = rospy.Subscriber("robot1/odom", Odometry, callback1)
    turtlebot3_model = rospy.get_param("model", "burger")

    pose_and_orient1 = Odometry()
    status=0
    

    lider_pose_x = np.array([])
    lider_pose_y = np.array([])
    lider_pose_yaw = np.array([])

    try:
        
        while not rospy.is_shutdown():
            #Guardar información robot líder
            #------------------X Y THETA ROBOT LIDER ---------------------- 
            pose1 = pose_and_orient1.pose.pose.position
            orient1 = pose_and_orient1.pose.pose.orientation
            _, _, yaw1 = euler_from_quaternion([orient1.x, orient1.y, orient1.z, orient1.w])
            theta1 = yaw1
            status=status+1
            #ALMACENO LOS DATOS DEL ROBOT LIDER
            if status==1000:
                print('posicion: ', pose1.x)
                if not (pose1.x == 0 and pose1.y == 0):
                    lider_pose_x = np.append(lider_pose_x, pose1.x)
                    lider_pose_y = np.append(lider_pose_y, pose1.y)
                    lider_pose_yaw = np.append(lider_pose_yaw, theta1)
                
                status=0

    except:
        print('Exception Fuuuck')

    finally:
        np.savetxt(LOG_FILE_DIR+'/lider_pose_x_mw.csv', lider_pose_x, '%f', delimiter = ' , ')
        np.savetxt(LOG_FILE_DIR+'/lider_pose_y_mw.csv', lider_pose_y, '%f', delimiter = ' , ')
        np.savetxt(LOG_FILE_DIR+'/lider_pose_yaw_mw.csv', lider_pose_yaw, '%f', delimiter = ' , ')
        print('Los archivos de datos han sido actualizados')

    if os.name != 'nt':
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
